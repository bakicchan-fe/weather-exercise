{"version":3,"sources":["utils.ts","app/api.ts","data/config.js","app/actions.ts","app/reducer.ts","app/store.ts","app/localStorage.ts","serviceWorker.ts","component/WeatherInfoRow.tsx","screen/App.tsx","index.tsx"],"names":["lowerCaseText","text","toLowerCase","processApiCall","apiCall","successAction","params","dispatch","getState","a","result","type","payload","console","log","getWeatherApi","coord","id","value","axios","get","lat","lon","then","response","data","weather","name","catch","error","STORE_WEATHER","DELETE_RECORD","EDIT_RECORD","retrieveWeather","editRecord","initialState","weatherData","weatherReducer","state","action","indexToEdit","findIndex","newWeatherArray","filter","preloadedState","savedState","localStorage","getItem","JSON","parse","err","loadState","store","configureStore","reducer","subscribe","stringifiedState","stringify","setItem","saveState","Boolean","window","location","hostname","match","WeatherInfoRow","memo","weatherInfo","deleteRecord","useState","spin","setSpin","onReloadClick","useCallback","setTimeout","onDeleteClick","message","success","renderWeatherInfo","useMemo","span","QuestionOutlined","className","icon","description","alt","src","width","height","preview","align","justify","ReloadOutlined","onClick","CloseOutlined","dashed","mapDispatchToProps","connect","cities","require","setValue","cityOptions","setCityOptions","useEffect","length","filteredList","city","find","onSearchText","filteredCities","startsWith","getWeatherData","option","renderList","map","disabledAutocomplete","disabled","allowClear","placeholder","options","onSelect","onChange","onSearch","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d020f5ed.chunk.js","sourcesContent":["import { Dispatch } from \"@reduxjs/toolkit\";\nimport { RootState } from \"./app/store\";\nimport { OW_APIKEY, OW_BASEURL } from \"./data/config\";\n\nexport const lowerCaseText = (text: string) => text.toLowerCase();\n\n// Make the URL with the given params\nexport const makeUrl = (lat: number, lon: number) =>\n  `${OW_BASEURL}?lat=${lat}&lon=${lon}&appid=${OW_APIKEY}`;\n\n// Make the api call and process the response\nexport const processApiCall = ({ apiCall, successAction }: any) => {\n  return (params = {}) =>\n    async (dispatch: Dispatch, getState: () => RootState) => {\n      try {\n        let result = await apiCall(params);\n\n        if (successAction) {\n          dispatch({\n            type: successAction,\n            payload: result,\n          });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n};\n","import axios from \"axios\";\nimport { GetWeatherParams } from \"../types\";\nimport { makeUrl } from \"../utils\";\n\nexport const getWeatherApi = async (params: GetWeatherParams) => {\n  const { coord, id, value } = params;\n  return await axios\n    .get(makeUrl(coord.lat, coord.lon))\n    .then((response) => {\n      const { coord, weather, name: value } = response.data;\n      return { id, coord, weather, value };\n    })\n    .catch((error) => {\n      return { id, coord, weather: [], value, error: true };\n    });\n};\n","export const OW_APIKEY = \"9eddb87de3500e438f2b49b606e6121e\";\nexport const OW_BASEURL = \"http://api.openweathermap.org/data/2.5/weather\";\n","import { GetWeatherParams } from \"../types\";\nimport { processApiCall } from \"../utils\";\nimport { getWeatherApi } from \"./api\";\n\nexport const RETRIEVE_WEATHER = \"RETRIEVE_WEATHER\";\nexport const STORE_WEATHER = \"STORE_WEATHER_DATA\";\nexport const DELETE_RECORD = \"DELETE_RECORD\";\nexport const EDIT_RECORD = \"EDIT_RECORD\";\n\nexport const retrieveWeather = processApiCall({\n  apiCall: (params: GetWeatherParams) => getWeatherApi(params),\n  successAction: STORE_WEATHER,\n});\n\nexport const editRecord = processApiCall({\n  apiCall: (params: GetWeatherParams) => getWeatherApi(params),\n  successAction: EDIT_RECORD,\n});\n\nexport const deleteRecord = (payload: number) => ({\n  type: DELETE_RECORD,\n  payload,\n});\n","import { WeatherState } from \"../types\";\nimport { DELETE_RECORD, EDIT_RECORD, STORE_WEATHER } from \"./actions\";\n\nconst initialState: WeatherState = {\n  weatherData: [],\n};\n\nconst weatherReducer = (state = initialState, action: any) => {\n  const { type, payload } = action;\n  switch (type) {\n    case STORE_WEATHER:\n      return {\n        ...state,\n        weatherData: [payload, ...state.weatherData],\n      };\n    case EDIT_RECORD:\n      const indexToEdit = state.weatherData.findIndex(\n        (weather) => weather.id === payload.id\n      );\n\n      const newWeatherArray = [...state.weatherData];\n      newWeatherArray[indexToEdit] = payload;\n\n      return {\n        ...state,\n        weatherData: newWeatherArray,\n      };\n    case DELETE_RECORD:\n      return {\n        ...state,\n        weatherData: state.weatherData.filter(\n          (weather: any) => weather.id !== payload\n        ),\n      };\n  }\n  return state;\n};\n\nexport default weatherReducer;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport { loadState, saveState } from \"./localStorage\";\nimport weatherReducer from \"./reducer\";\n\nconst preloadedState = loadState();\n\nexport const store = configureStore({\n  reducer: weatherReducer,\n  preloadedState,\n});\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { RootState } from \"./store\";\n\nexport const loadState = () => {\n  try {\n    const savedState = localStorage.getItem(\"state\");\n    if (savedState === null) {\n      return undefined;\n    }\n    return JSON.parse(savedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  try {\n    const stringifiedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", stringifiedState);\n  } catch (err) {\n    console.log(err);\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { memo, useCallback, useState, useMemo } from \"react\";\nimport { Divider, Image, Row, Col, message } from \"antd\";\nimport {\n  ReloadOutlined,\n  CloseOutlined,\n  QuestionOutlined,\n} from \"@ant-design/icons\";\nimport { GetWeatherParams, WeatherInfo } from \"../types\";\nimport \"./WeatherInfoRow.styles.css\";\n\ninterface WeatherInfoRowProps {\n  weatherInfo: WeatherInfo;\n  deleteRecord: (id: number) => void;\n  editRecord: (params: GetWeatherParams) => void;\n}\n\nconst WeatherInfoRow = memo(\n  ({ weatherInfo, editRecord, deleteRecord }: WeatherInfoRowProps) => {\n    const { value, id, weather, coord } = weatherInfo;\n\n    const [spin, setSpin] = useState(false);\n\n    const onReloadClick = useCallback(() => {\n      editRecord({ coord, id, value });\n      setSpin(true);\n\n      setTimeout(() => {\n        setSpin(false);\n      }, 1000);\n    }, [coord, editRecord, id, value]);\n\n    const onDeleteClick = useCallback(() => {\n      deleteRecord(id);\n      message.success(\"City deleted!\");\n    }, [deleteRecord, id]);\n\n    const renderWeatherInfo = useMemo(() => {\n      if (weatherInfo.error) {\n        return (\n          <Col span={12}>\n            <QuestionOutlined className=\"error-icon\" />\n            <p>Unable to fetch data</p>\n          </Col>\n        );\n      } else {\n        const { icon, description } = weather[0];\n        return (\n          <Col span={12}>\n            <Image\n              alt={description}\n              src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n              width={40}\n              height={40}\n              preview={false}\n            />\n            <p>{weather[0].description}</p>\n          </Col>\n        );\n      }\n    }, [weather, weatherInfo.error]);\n\n    return (\n      <Row\n        align=\"middle\"\n        justify=\"space-between\"\n        key={id}\n        className=\"row-margin\"\n      >\n        <Col span={4}>\n          <h3>{value}</h3>\n        </Col>\n\n        {renderWeatherInfo}\n\n        <Col>\n          <ReloadOutlined\n            spin={spin}\n            className=\"icon margin-right-10\"\n            onClick={onReloadClick}\n          />\n          <CloseOutlined className=\"icon\" onClick={onDeleteClick} />\n        </Col>\n        <Divider className=\"margin-top-10\" dashed />\n      </Row>\n    );\n  }\n);\n\nexport default WeatherInfoRow;\n","import React, { useState, useCallback, useEffect, useMemo } from \"react\";\nimport \"./App.css\";\nimport { AutoComplete, Empty } from \"antd\";\nimport { lowerCaseText } from \"../utils\";\nimport { City, GetWeatherParams, WeatherInfo } from \"../types\";\nimport { connect } from \"react-redux\";\nimport { RootState } from \"../app/store\";\nimport { editRecord, deleteRecord, retrieveWeather } from \"../app/actions\";\nimport WeatherInfoRow from \"../component/WeatherInfoRow\";\n\ninterface AppProps {\n  weatherData: Array<WeatherInfo>;\n  deleteRecord: (id: number) => void;\n  retrieveWeather: (params: GetWeatherParams) => void;\n  editRecord: (params: GetWeatherParams) => void;\n}\n\nconst App = ({\n  weatherData,\n  retrieveWeather,\n  editRecord,\n  deleteRecord,\n}: AppProps) => {\n  const cities = require(\"../data/cities.json\");\n\n  const [value, setValue] = useState<string>();\n  const [cityOptions, setCityOptions] = useState<City[]>([]);\n\n  useEffect(() => {\n    if (weatherData.length > 0) {\n      const filteredList = cities.filter((city: any) => {\n        return !weatherData.find((data) => data.id === city.id);\n      });\n      setCityOptions(filteredList);\n    } else {\n      setCityOptions(cities);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [weatherData]);\n\n  const onSearchText = useCallback(\n    (text: string) => {\n      const filteredCities = cities.filter((city: City) =>\n        lowerCaseText(city.value).startsWith(lowerCaseText(text))\n      );\n\n      setCityOptions(filteredCities);\n    },\n    [cities]\n  );\n\n  const getWeatherData = useCallback(\n    (value: string, option: City) => {\n      const { coord, id } = option;\n\n      const params = { coord, id, value };\n\n      retrieveWeather(params);\n    },\n    [retrieveWeather]\n  );\n\n  const renderList = useMemo(() => {\n    if (weatherData.length === 0) {\n      return <Empty className=\"margin-top-50\" />;\n    } else {\n      return weatherData.map((weatherInfo: WeatherInfo) => (\n        <>\n          <WeatherInfoRow\n            key={weatherInfo.id}\n            weatherInfo={weatherInfo}\n            deleteRecord={deleteRecord}\n            editRecord={editRecord}\n          />\n        </>\n      ));\n    }\n  }, [deleteRecord, editRecord, weatherData]);\n\n  const disabledAutocomplete = useMemo(\n    () => cityOptions.length === 0,\n    [cityOptions.length]\n  );\n\n  return (\n    <div className=\"container\">\n      <header className=\"header\">\n        <h1>Weather Info</h1>\n      </header>\n      <div className=\"options-container\">\n        <AutoComplete\n          disabled={disabledAutocomplete}\n          allowClear\n          placeholder={\n            disabledAutocomplete\n              ? \"No city available\"\n              : \"Write or choose a city\"\n          }\n          options={cityOptions}\n          value={value}\n          className=\"margin-autocomplete\"\n          onSelect={(value: string, option: City) => {\n            getWeatherData(value, option);\n            setValue(\"\");\n          }}\n          onChange={setValue}\n          onSearch={onSearchText}\n        />\n        {renderList}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ weatherData }: RootState) => ({\n  weatherData,\n});\n\nconst mapDispatchToProps = { retrieveWeather, editRecord, deleteRecord };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"antd/dist/antd.css\";\nimport App from \"./screen/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}